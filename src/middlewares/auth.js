import jwt from 'jsonwebtoken';

/**
 * üîê V√âRIFICATION DU TOKEN JWT
 * V√©rifie et d√©code un token JWT
 */
export const verifyToken = async (token) => {
  try {
    if (!token) {
      throw new Error('Token manquant');
    }

    // Retirer le pr√©fixe "Bearer " si pr√©sent
    const cleanToken = token.replace('Bearer ', '');

    // V√©rifier et d√©coder le token
    const decoded = jwt.verify(cleanToken, process.env.JWT_SECRET);

    return decoded;
  } catch (error) {
    console.error('‚ùå Erreur v√©rification token:', error.message);
    throw new Error('Token invalide ou expir√©');
  }
};

/**
 * üîê MIDDLEWARE D'AUTHENTIFICATION POUR GRAPHQL
 * Extrait et v√©rifie le token depuis les headers
 */
export const authenticate = async (req) => {
  try {
    // R√©cup√©rer le token depuis les headers
    const authHeader = req.headers.authorization || req.headers.Authorization;

    if (!authHeader) {
      return null;
    }

    const token = authHeader.replace('Bearer ', '');
    const decoded = await verifyToken(token);

    return decoded;
  } catch (error) {
    console.error('‚ùå Erreur authentification:', error.message);
    return null;
  }
};

export default {
  verifyToken,
  authenticate
};
